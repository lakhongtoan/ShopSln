@page "/admin/products/edit/{id:long}"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using Shop.Models
@inject AppDbContext Db
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Chỉnh sửa sản phẩm</PageTitle>
@if (product == null)
{
    <p><em>Đang tải sản phẩm...</em></p>
}
else
{
    <EditForm Model="product" OnValidSubmit="HandleUpdate">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Tên sản phẩm</label>
            <InputText class="form-control" @bind-Value="product.Name" />
        </div>

        <div class="mb-3">33
            <label>Mô tả</label>
            <InputTextArea class="form-control" @bind-Value="product.Description" Rows="3" />
        </div>

        <div class="mb-3">
            <label>Giá</label>
            <InputNumber class="form-control" @bind-Value="product.Price" />
        </div>

        <div class="form-check">
            <InputCheckbox class="form-check-input" @bind-Value="product.IsActive" />
            <label class="form-check-label">Kích hoạt</label>
        </div>

        <div class="form-check">
            <InputCheckbox class="form-check-input" @bind-Value="product.IsFeatured" />
            <label class="form-check-label">Nổi bật</label>
        </div>

        <div class="mt-3">
            <button class="btn btn-primary" type="submit">Cập nhật</button>
            <NavLink class="btn btn-secondary" href="/admin/products">Quay lại</NavLink>
        </div>
    </EditForm>
}
@code {
    [Parameter] public long id { get; set; }
    private Product? product;

    protected override async Task OnInitializedAsync()
    {
        product = await Db.Products.FindAsync(id);
    }

    private async Task HandleUpdate()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (product != null)
        {
            product.UpdatedAt = DateTime.Now;
            product.UpdatedBy = user.Identity != null && user.Identity.IsAuthenticated
                    ? user.Identity.Name
                    : "Anonymous";
            Db.Products.Update(product);
            await Db.SaveChangesAsync();
            Nav.NavigateTo("/admin/products");
        }
    }
}
